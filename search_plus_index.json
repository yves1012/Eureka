{"./":{"url":"./","title":"Eureka","keywords":"","body":"Eureka 阿基米德发现浮力原理时，国王怀疑金匠在做王冠时私吞了黄金，于是便请阿基米德想方法进行检验。阿基米德冥思苦想数日，却终究不得其解，有一日他坐进澡盆准备洗澡，看到水往外溢，霎时灵光乍现，想出了测量方法，他激动得连衣服都没顾上穿就跑到了街上，大喊着：“Eureka！Eureka！”。 从此，当人们解决了一个盘旋于心中困扰已久的重要问题或有了重大发现后，终于有了一个词可以让他们在一瞬间释放自己的狂喜和雀跃：Eureka！ 初衷 之前学习新知识、新概念陷入一个比较大的误区，总是花费较多时间去熟识理念层面的内容，不料有些内容今天了解了，明天就忘了，更是缺乏笔记性的资料与实际操作，免不了如过眼云烟转瞬即逝。零碎写过的一些笔记，不系统且保管不善，自己知道明明学习过、总结过的知识，到使用时硬是找不到，不免些许遗憾。于是打算弄一个类似于图书馆的地方统一保管，以便使用时及时查询。 同时，强制自己按时做一些事情，稍微克服本身存在的散漫习性，不要三天打鱼两天晒网，巩固习得性成果，养成持续学习、持续输出的习惯，正所谓纸上得来终觉浅，绝知此事要躬行。 联系 时间有限，经历有限，最好不要联系我，更不要加什么微信，加了无非就是通讯录多个图标而已，没有意义。何况我不喜欢被打扰，尤其不喜欢工作时间被碎片化，至今我的手机一直都是处于静音状态，任何软件都是禁止通知状态。 如果你确实需要联系我，比如获取相关资源，咨询技术问题，请发邮件，地址：yves1012@163.com 。 祝你平安喜乐！ var className='atoc';"},"crawler_web.html":{"url":"crawler_web.html","title":"crawler_web","keywords":"","body":"如何扒取整站内容 刚看到一个很棒的资料站，想把里面的内容下载下来，嫌弃复制粘贴的方式太麻烦，于是写了个爬虫脚本去抓取，由于网站设置了反爬策略，不成功。 苦思冥想，wget 命令解决。 wget 可以以递归的方式下载整站，并可以将下载的页面中的链接转换为本地链接，加上相关参数后就可以变成功能强大的下载工具。 wget -r -p -np -k 网址 -r, –recursive（递归） specify recursive download.（指定递归下载） -k, –convert-links（转换链接） make links in downloaded HTML point to local files.（将下载的HTML页面中的链接转换为相对链接即本地链接） -p, –page-requisites（页面必需元素） get all images, etc. needed to display HTML page.（下载所有的图片等页面显示所需的内容） -np, –no-parent（不追溯至父级） don’t ascend to the parent directory. 另外断点续传用-nc参数 日志 用-o参数 随便选一个网站进行试验： [root@iZbp131uq20xx1y0zvhsskZ ~]# wget -r -p -np -k https://www.baidu.com --2020-01-13 17:47:12-- https://www.baidu.com/ Resolving www.baidu.com (www.baidu.com)... 180.101.49.11, 180.101.49.12 Connecting to www.baidu.com (www.baidu.com)|180.101.49.11|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 2443 (2.4K) [text/html] Saving to: ‘www.baidu.com/index.html’ 100%[=======================================================================================>] 2,443 --.-K/s in 0s 2020-01-13 17:47:12 (787 MB/s) - ‘www.baidu.com/index.html’ saved [2443/2443] Loading robots.txt; please ignore errors. --2020-01-13 17:47:12-- https://www.baidu.com/robots.txt Reusing existing connection to www.baidu.com:443. HTTP request sent, awaiting response... 200 OK Length: 2814 (2.7K) [text/plain] Saving to: ‘www.baidu.com/robots.txt’ 100%[=======================================================================================>] 2,814 --.-K/s in 0s 2020-01-13 17:47:12 (40.1 MB/s) - ‘www.baidu.com/robots.txt’ saved [2814/2814] Loading robots.txt; please ignore errors. --2020-01-13 17:47:12-- http://www.baidu.com/robots.txt Connecting to www.baidu.com (www.baidu.com)|180.101.49.11|:80... connected. HTTP request sent, awaiting response... 200 OK Length: 2814 (2.7K) [text/plain] Saving to: ‘www.baidu.com/robots.txt’ 100%[=======================================================================================>] 2,814 --.-K/s in 0s 2020-01-13 17:47:12 (619 MB/s) - ‘www.baidu.com/robots.txt’ saved [2814/2814] FINISHED --2020-01-13 17:47:12-- Total wall clock time: 0.1s Downloaded: 3 files, 7.9K in 0s (104 MB/s) Converting www.baidu.com/index.html... 0-4 Converted 1 files in 0 seconds. 执行完成后，目录下会出现一个新文件夹，里面包含下载内容： [root@iZbp131uq20xx1y0zvhsskZ ~]# ll total 4 drwxr-xr-x 2 root root 4096 Jan 13 17:47 www.baidu.com 将文件打包下载即可： tar -cvf log.tar 1.log # 仅打包不压缩 tar -zcvf log.tar.gz 1.log # 打包后以 gzip 压缩 tar -jcvf log.tar.bz2 1.log # 打包后，以 bzip2 压缩 var className='atoc';"},"google_hacking.html":{"url":"google_hacking.html","title":"Google Hacking语法","keywords":"","body":"Google Hacking语法 关键词 通配符 关键词 关键词 说明 site 搜索范围限制在该域名中，例如：“site:www.4ngel.net”将返回所有和该站有关的链接 inurl 搜索指定的字符是否存在于URL中，例如：“inurl:admin”将返回N个包含admin字符的链接 filetype 搜索特定类型文档，例如：“filetype:doc”将返回所有以doc结尾的文件URL intext 正文中搜索某个字符，例如：“intext:中国”将返回所有在网页正文部分包含”中国”的链接 intitle 标题中搜索某个字符，例如：“ntitle:安全天使”将返回所有网页标题中包含”安全天使”的链接 cache 搜索谷歌缓存页面 define 查询单词或者术语的定义，例如：“define:hacker”将返回关于hacker的定义 info 查找指定站点的一些基本信息 link 搜索所有链接到某个URL地址的网页，例如：“link:www.4ngel.net”将返回所有和该网址做了连接的链接 inanchor 锚链链接搜索在做网站中有时候用锚点来链接一个页面中的其它部分内容，这样方便浏览和定位，也就是说锚点链接的内容通常是网页内容中重要的章节或内容的开始部分，因而对它们的搜索也更能反映网页的主题内容，提高搜索结果的准确度 related 相关网址查找与某个页面结构内容相似的页面，“related”用来搜索结构内容方面相似的网页，比如当你用related搜索一个图书馆网址的时候会出来大量图书馆的网站，如：related:lib.nit.net.cn 通配符 通配符 说明 “” 在关键词加双引号会实现精确搜索，不进行分词 ※ 谷歌的通配符星号“*”必须在精确搜索符双引号内使用，用通配符代替关键词或短语中无法确定的词 . 与通配符星号“*”不一样的是，点号“.”匹配的是字符，不是字、短语等内容 .. 两个点号“..”表示一个数字范围，一般应用于日期、货币、尺寸、重量、高度等范围的搜索 + 加号“+”用于强制搜索，即必须包含加号后的内容，一般与精确搜索符一起应用 - 关键词前加“-”减号，要求搜索结果中包含关键词，但不包含减号后的关键词 () 括号“()”是分组符号 var className='atoc';"},"tool.html":{"url":"tool.html","title":"经济指标查询","keywords":"","body":"经济指标查询 数据类 表头 表头 表头 表头 表头 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 CPI指数 - 居民消费价格指数 PPI指数 - 工业品出厂价格指数 GDP指数 - 国内生产总值 PMI指数 - 采购经理人指数 存款准备金率 货币供应量（M1.M2.M0） 工业增加值 银行间拆借利率（Shibor） 新增信贷数据 中国10年期国债收益率 人民币兑美元 纽约黄金 螺纹钢 伦铜 布伦特原油 铁矿石 路透CRB商品指数 波罗的海BDI指数 美元指数 中证转债 企债指数 天天基金网 中证指数官网 智投星 - DIY定投策略 理杏仁 - 指数基金估值查询 集思录- 中国专业的低风险投资工具型社区 看财报 巨潮资讯 - 中国证监会指定的信息披露网站 果仁网 - 适合入门级的量化投资者 东方财富网 中国理财网 - 银行理财产品查询 天眼查 金银比 国家统计局 上海银行间同业拆放利率 全球经济数据 应用类 东方财富 通达信 英为行情 万得股票 天天基金 晨星网 var className='atoc';"},"vps.html":{"url":"vps.html","title":"搭建愉快服务器","keywords":"","body":"搭建愉快服务器 免费or收费 远程连接工具 安装搭建脚本 小飞机下载 免费or收费 网上有很多免费的科学上网工具，但一般带宽设限使用时相当慢，其次则是客户端广告较多影响体验。因此比较推荐购买 VPS 主机资源进行服务器搭建。 国内市占率较高的主要有两家，分别是 搬瓦工 与 Vultr ，两者之间的主要区别在于：前者是按年或月收费，后者则按照使用时长收费。 购买链接： 搬瓦工购买链接 Vultr购买链接 远程连接工具 下载SecureCRT远程连接软件，安装后使用。 安装搭建脚本 使用Secure CRT工具连接成功后，粘贴下面的命令进行操作： [root@vultr ~]# yum install -y wget && wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh && bash shadowsocks-libev.sh 回车后系统会自行下载脚本文件并运行，按照下图提示，我们输入1选择安装服务，回车继续： 2020-01-12 15:44:00 (51.7 MB/s) - ‘shadowsocks-libev.sh’ saved [21414/21414] ============================================== Shadowsocks Server Management Script (libev) ============================================== 1. Shadowsocks Server Install 2. Shadowsocks Server Uninstall 3. Shadowsocks Server Update ---------------------------------------------- 4. Shadowsocks Server Start 5. Shadowsocks Server Stop 6. Shadowsocks Server Restart ---------------------------------------------- 7. Shadowsocks Config Status 8. Shadowsocks Config Modify ============================================== Not installed Please Enter the Number:1 回车后系统会进入安装界面，我们首先依次输入 SS 的各项信息，然后回车继续即可： [Info] Start set shadowsocks's config information... [Info] Wherever you are not sure, just press Enter to continue. Please enter shadowsocks's password [Default is 123456]: ------------------------------- Shadowsocks's Password: 123456 ------------------------------- Please enter shadowsocks's port (1~65535) [Default is 33526]: ------------------------------- Shadowsocks's Port: 33526 ------------------------------- Please select shadowsocks's stream cipher 1) aes-256-gcm 2) aes-256-ctr 3) aes-256-cfb 4) chacha20-ietf-poly1305 5) chacha20-ietf 6) chacha20 7) rc4-md5 [Default is aes-256-gcm]:3 ------------------------------- Shadowsocks's Streamcipher: aes-256-cfb ------------------------------- Press Enter to continue...or Press Ctrl+C to cancel 安装过程耗时 2~5 分钟，完成后会来到下图界面： [Info] Congratulations, Shadowsocks has been installed successfully. ================================================= Server IP : 1.1.1.1 Server Port : 33526 Password : 123456 Encryption Method: aes-256-cfb ------------------------------------------------- ss://YWVzLTI1Ni1jZmI6TnVtYmVyMTQzMzIyM0AxNDkuMjguMTMyLjEzMzo5NTI2 ================================================= You can find the config's backup in /root/shadowsocks.txt. For more tutorials: https://www.banwagongzw.com & https://www.vultrcn.com 接下来需要安装锐速TCP加速软件，由于系统自带内核版本太高无法安装锐速，需要进行降级，复制命令进行操作： [root@vultr ~]# wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh 回车后系统会自动下载脚本并执行更换内核命令，按图提示，我们可以看到当前系统为CentOS7，等待内核更换完毕后系统会自动重启并断开连接： [INFO] System OS is CentOS7. Processing... ------------------------------------------- Retrieving https://filedown.me/Linux/Kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm Preparing... ################################# [100%] Updating / installing... 1:kernel-3.10.0-229.1.2.el7 ################################# [100%] ------------------------------------------- [INFO] Success! Your server will reboot in 3s... [INFO] Success! Your server will reboot in 2s... [INFO] Success! Your server will reboot in 1s... [INFO] Reboot... 系统重启后，软件会断开连接，等待3分钟左右服务器即可重启完毕，我们重新连接服务器，按图提示，我们继续复制命令： // [root@vultr ~]# yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh 回车后系统会自动下载脚本并执行，按图提示，我们直接回车继续即可： Local Time : 2020-01-12 [16:00:09] ====================================================== | serverSpeeder | | for Linux | |----------------------------------------------------| | -- By .Vicer | ====================================================== Preparatory work... Press Enter to Continue... Preparatory work... Press Enter to Continue... Archive: /tmp/appex.zip inflating: /tmp/appex/install.sh creating: /tmp/appex/apxfiles/ creating: /tmp/appex/apxfiles/bin/ inflating: /tmp/appex/apxfiles/bin/renewLic.sh inflating: /tmp/appex/apxfiles/bin/serverSpeeder.sh inflating: /tmp/appex/apxfiles/bin/setConfig.sh inflating: /tmp/appex/apxfiles/bin/showConfig.sh inflating: /tmp/appex/apxfiles/bin/update.sh inflating: /tmp/appex/apxfiles/bin/utils.sh creating: /tmp/appex/apxfiles/etc/ inflating: /tmp/appex/apxfiles/etc/config Lic generate success! Installation done! 回车继续后系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息，按图提示，我们每次都直接回车继续即可： ---- You are about to be asked to enter information that will be used by ServerSpeeder, there are several fields and you can leave them blank, for all fields there will be a default value. ---- Accelerate VPN (PPTP,L2TP,etc.)? [n]: Auto load ServerSpeeder on linux start-up? [y]: /etc/centos-release:CentOS Linux release 7.7.1908 (Core) /etc/os-release:NAME=\"CentOS Linux\" /etc/os-release:PRETTY_NAME=\"CentOS Linux 7 (Core)\" /etc/os-release:CENTOS_MANTISBT_PROJECT=\"CentOS-7\" /etc/redhat-release:CentOS Linux release 7.7.1908 (Core) /etc/system-release:CentOS Linux release 7.7.1908 (Core) Run ServerSpeeder now? [y]: 设置完三项信息完成后，系统会完成锐速安装并输出锐速的运行状态，按图提示，当出现红框内信息时说明锐速已完成安装并开机自启动： (license 628A71EDC5706E97151885d3) [Running Status] ServerSpeeder is running! version 3.11.20.10 [License Information] License 628A71EDC5706E97 (valid on current device) MaxSession unlimited MaxTcpAccSession unlimited MaxBandwidth(kbps) 1024000 ExpireDate 2035-12-31 在使用的过程中如果需要修改相关的配置信息，请使用下面的命令： 附一、修改Shadowsocks的配置信息 如果你以后需要修改Shadowsocks的配置（比如密码、端口或者加密），可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 8 项：修改Shadowsocks配置即可重新设置Shadowsocks的密码、端口以及加密方式。 附二、卸载Shadowsocks服务 如果你以后需要卸载Shadowsocks服务，可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 2 项：卸载Shadowsocks服务即可从服务器中卸载掉Shadowsocks服务。 小飞机下载 安装完成后，需要在我们需要科学上网的设备上安装相应软件来连接，下载Shadowsocks小飞机，安装后使用。 var className='atoc';"},"google_email.html":{"url":"google_email.html","title":"怎么申请谷歌邮箱","keywords":"","body":"怎么申请谷歌邮箱 为什么要申请 谷歌邮箱是世界上最好用的邮箱，没有之一。由于在全球市场上的霸主地位，因而许多网站都可以使用谷歌邮箱进行第三方登录。 怎么申请 网页上按照正常操作申请谷歌邮箱大概率不能成功（被黑产玩坏了），因而需要借助移动端进行申请注册，具体步骤请参考视频。 var className='atoc';"},"django.html":{"url":"django.html","title":"创建第一个Django应用","keywords":"","body":"创建第一个Django应用 创建项目 创建应用与细节优化 应用创建 项目细节优化 数据库配置 创建项目 创建项目目录并安装虚拟环境： yvesdeMacBook-Air:Python yves$ mkdir Propaganda // 创建项目目录 yvesdeMacBook-Air:Python yves$ cd Propaganda yvesdeMacBook-Air:Python yves$ pipenv install // 安装虚拟环境 Warning: the environment variable LANG is not set! We recommend setting this in ~/.profile (or equivalent) for proper expected behavior. Creating a virtualenv for this project… Pipfile: /Users/yves/Documents/GitHub/Python/Propaganda/Pipfile Using /usr/local/bin/python3 (3.6.4) to create virtualenv… ⠧ Creating virtual environment...Already using interpreter /usr/local/bin/python3 Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6' New python executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python3 Also creating executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python Installing setuptools, pip, wheel... done. ✔ Successfully created virtual environment! Virtualenv location: /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM Creating a Pipfile for this project… Pipfile.lock not found, creating… Locking [dev-packages] dependencies… Locking [packages] dependencies… Updated Pipfile.lock (ca72e7)! Installing dependencies from Pipfile.lock (ca72e7)… 🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. 启动开发环境并安装Django： yvesdeMacBook-Air:Propaganda yves$ pipenv shell // 启动虚拟环境 Launching subshell in virtual environment… bash-3.2$ . /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/activate (Propaganda) bash-3.2$ pipenv install Django // 安装Django Installing Django… Adding Django to Pipfile's [packages]… ✔ Installation Succeeded Pipfile.lock (12ffd6) out of date, updating to (ca72e7)… Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (12ffd6)! Installing dependencies from Pipfile.lock (12ffd6)… 🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 4/4 — 00:00:04 Django常见命令有创建项目、创建应用、创建超级用户、数据表创建及更新、启动服务器等，这些命令都包含在 django-admin.py 和 manage.py 里。除此以外 manage.py 还包含其它有用的命令，基本包含： 创建新项目：django-admin startproject project_name 创建新应用：python manage.py startapp app_name 检测模型变化生成新的数据库迁移文件：python manage.py makemigrations [app_name] 同步数据库与模型：python manage.py migrate 启动服务器：python manage.py runserver 创建超级用户：python manage.py createsuperuser 修改用户密码：python manage.py changepassword username 打开交互终端：python manage.py shell（dbshell指数据库交互） 查看当前版本：python manage.py version 清空数据库内容只留下空表：python manage.py flush 搜集静态文件：python manage.py collectstatic 创建Django项目并启动验证是否成功： (Propaganda) bash-3.2$ django-admin startproject Propaganda // 创建项目 (Propaganda) bash-3.2$ ll // 项目文件结构 drwxr-xr-x 7 yves staff 224 Dec 6 21:06 ./ drwxr-xr-x 12 yves staff 384 Dec 6 20:34 ../ -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 7 yves staff 224 Dec 6 20:56 Propaganda/ -rwxr-xr-x 1 yves staff 630 Dec 6 20:56 manage.py* (Propaganda) bash-3.2$ python manage.py runserver // 启动项目 Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. December 06, 2019 - 13:14:35 Django version 3.0, using settings 'Propaganda.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. 在浏览器输入 http://127.0.0.1:8000/ 看到Django启动页即表示项目创建成功。 创建应用与细节优化 应用创建 项目创建成功并验证通过后就可以创建相关应用： (Propaganda) bash-3.2$ python manage.py startapp chatriq 创建成功后需要在 settings.py 文件中加入相应配置： INSTALLED_APPS = [ 'chatriq' ] 项目细节优化 在项目根目录下创建 apps 包目录，用于统一管理后期创建的应用，这需要在 settings.py 文件里新增一条配置： sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) # 将apps目录加到python的搜索目录中去 修改 settings.py 文件里的配置： LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Shanghai' USE_TZ = False 在根目录下创建 static 目录用于存放静态文件，创建 templates 文件夹用于存放模板文件，并在 settings.py 文件中添加配置： STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), ) 最终，目录结构如下： (Propaganda) bash-3.2$ ll -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 8 yves staff 256 Dec 6 21:43 Propaganda/ drwxr-xr-x 4 yves staff 128 Dec 6 21:41 apps/ -rw-r--r-- 1 yves staff 0 Dec 6 21:14 db.sqlite3 -rwxr-xr-x@ 1 yves staff 630 Dec 6 20:56 manage.py drwxr-xr-x 2 yves staff 64 Dec 6 21:26 static/ drwxr-xr-x 2 yves staff 64 Dec 6 21:26 templates/ 数据库配置 在 settings.py 文件中可以配置项目连接的数据库信息，由于本项目暂时不涉及数据库相关操作。 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } 生成表迁移数据并在数据库中创建对应表文件： (Propaganda) bash-3.2$ python manage.py makemigrations No changes detected (Propaganda) bash-3.2$ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying sessions.0001_initial... OK 至此，Django项目应用创建完毕，后续更新编码过程中的细节与注意事项。 var className='atoc';"},"django_deploy.html":{"url":"django_deploy.html","title":"Django应用部署与监控","keywords":"","body":"Django应用部署与监控 部署准备 环境搭建 新增用户 Python环境 MySQL数据库 部署代码 Gunicorn安装 Nginx安装 Supervisor安装 问题与解决 图片上传报错 部署准备 一台云服务器，初级版（1核1G）即可，安装CentOS7.2版本操作系统，建议最好使用阿里云；一个已经完成ICP备案的域名。 环境搭建 新增用户 操作CentOS服务器，最好不要使用root根用户，其一是防止误操作；其二是避免在部署的过程中出现权限相关问题。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ adduser yves # 添加yves用户 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ passwd yves # 设置yves的操作密码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ usermod -aG wheel yves # 将yves添加到超级权限组 Python环境 安装Python环境之前，需要在操作系统上安装必要软件并更新yum源。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum update # 更新yum源 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum upgrade [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc # 安装必要软件 这个步骤需要一定时间，耐心等待完成之后再进行下一步的安装Python-3.6.4。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir src # 家目录下新建src目录存放下载文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd src # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz # 下载Python-3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ tar -zxvf Python-3.6.4.tgz # 解压 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd Python-3.6.4 # 进入解压目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ ./configure LD_RUN_PATH=/usr/local/lib LDFLAGS=\"-L/usr/local/lib\" CPPFLAGS=\"-I/usr/local/include\" [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ make LD_RUN_PATH=/usr/local/lib # 编译 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo make install # 安装 上述下载、编译、安装等操作完成后，需要验证是否安装成功，出现下列版本信息即表示安装成功。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ python3 -V Python 3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip3 -V pip 19.3.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6) 安装最好用的python虚拟环境和包管理工具pipenv。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo pip3 install pipenv 问题：sudo: pip3: command not found 在环境变量中添加 alias sudo='sudo env PATH=$PATH' 并使其生效即可。 MySQL数据库 CentOS默认安装mariadb数据库，首先你需要卸载. [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ yum remove mariadb-libs.x86_64 安装MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/src/ # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm # 下载安装依赖文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install mysql-community-server # 安装MyS数据库 MySQL数据库的相关操作。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld start # 启动 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld stop # 停止 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld restart # 重启 查看MySQL数据库的初始密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cat /var/log/mysqld.log | grep password 登录MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mysql -uroot -p 修改MySQL数据库密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ SET PASSWORD = PASSWORD('123456'); 开启远程连接 mysql> show databases; mysql> use mysql; mysql> show tables; mysql> select Host, User from user \\G; mysql> update user set host = '%' where user = 'root'; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql> flush privileges; Query OK, 0 rows affected (0.00 sec) 开启genelog mysql> set global general_log_file=\"/tmp/general.log\"; mysql> set global general_log=on; 创建用户 mysql> create user 'imooc'@'%' identified by '123456'; 赋于用户权限 mysql> grant all privileges on *.* to 'imooc'@'%' identified by '123456' with mysql> grant option; # 所有权限 mysql> grant select on *.* to 'imooc'@'%' identified by '123456' with grant option; # 查询权限 mysql> revoke all privileges on *.* from imooc; # 收回权限 mysql> flush privileges; 忘记密码 [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 添加skip-grant-tables mysql> show databases; mysql> user mysql; mysql> update user set authentication_string = password(\"123456\") where user = 'root'; [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 去除skip-grant-tables [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo service mysqld restart 部署代码 将项目代码上传到部署目录下，方法比较多，推荐使用Git进行代码版本的管理，首先需要在服务器上安装相关应用并从远程仓库拉取代码，拉取完成后修改成生产环境的配置。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install git # 安装git应用 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir ~/apps/ # 创建项目部署目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/apps/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ git clone '远程仓库地址' # 拉取代码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd '项目目录' [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install --deploy --ignore-pipfile # 安装所需依赖 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py migrate # 创建数据库 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py runserver 0.0.0.0:8000 # 启动服务 服务启动后，即可以通过公网IP:8000端口访问应用，注意：务必在阿里云管理控制台放开8000端口，否则无法访问。 Gunicorn安装 直接使用runserver命令启动的开发服务器并不适用与生产环境，因此使用Gunicorn作为生产环境服务器。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install gunicorn # 安装gunicorn [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 0.0.0.0:8000 # 项目目录下启动 启动服务后，即可以通过公网IP:8000端口访问应用，但此时css样式全部未加载导致页面乱的一塌糊涂，这并非bug，而是由于处理静态文件请求并不是Gunicorn擅长的事情，应该交由更专业的Nginx去做。 Nginx安装 Nginx是一个高性能的HTTP和反向代理web服务器，它的功能非常多，这里主要用它来处理静态文件以及将非静态文件的请求反向代理给Gunicorn。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install epel-release -y [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install nginx -y # 安装Nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl start nginx # 启动nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl stop nginx # 停止nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl restart nginx # 重启nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ 直接在浏览器输入公网IP，看到nginx欢迎页面即表示安装并启动成功。下面就是修改应用中的settings.py配置文件，推荐Djecrety生成一个一个线上环境的SECRET_KEY。 DEBUG = False ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '公网IP或域名'] SECRET_KEY = ’***‘ STATICFILES_DIRS # 注释 STATIC_ROOT = os.path.join(BASE_DIR, 'static') # 新增 将项目的静态资源统一收集到static目录下。 pipenv run python manage.py collectstatic Nginx的配置位于/etc/nginx/nginx.conf文件中，其中项目的配置文件可以在/etc/nginx/conf.d/目录下新增，但是必须以.conf后缀结尾。 server { charset utf-8; listen 80; server_name 公网IP或域名; location /static { alias 绝对路径; } location /media { alias 绝对路径; } location / { proxy_set_header Host $host; proxy_pass http://127.0.0.1:8000; } } 配置文件新增完成之后，重启Nginx即可访问应用，至此基本完成Nginx与Gunicorn部署Django应用的目标。 Supervisor安装 由于服务器与网络存在不稳定的情况，因此直接在控制台启动应用的方式存在宕机的风险，并且没办法对相关进程进行监控，因此使用Supervisor来管理Gunicorn进程，这样当服务器重新启动或者Gunicorn进程意外崩溃后，Supervisor会帮我们自动重启Gunicorn。 由于Supervisor目前还不支持Python3，因此需要使用CentOS系统自带的python2版本进行安装。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip install supervisor 在家目录下新建相关的文件夹。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/conf.d # 创建配置文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/var/log # 创建日志文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/etc/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ echo_supervisord_conf > supervisord.conf # 生成supervisor配置文件 修改supervisor.conf，让Supervisor进程产生的一些文件生成到上面我们创建的目录下，而不是其默认指定的地方。 [unix_http_server] file=/home/yves/etc/supervisor/var/supervisor.sock logfile=/home/yves/etc/supervisor/var/log/supervisord.log pidfile=/home/yves/etc/supervisor/var/supervisord.pid user=yves [supervisorctl] serverurl=unix:///home/yves/etc/supervisor/var/supervisor.sock files=/home/yves/etc/supervisor/conf.d/*.ini 配置修改完成之后需要在conf.d文件夹下新增应用的配置文件，注意文件必须以.ini结尾。 [program:projectname] command=pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 127.0.0.1:8000 directory=/home/yves/apps/projectname autostart=true autorestart=unexpected user=yves stdout_logfile=/home/yves/etc/supervisor/var/log/projectname-stdout.log stderr_logfile=/home/yves/etc/supervisor/var/log/projectname-stderr.log 启动supervisor。 supervisord -c ~/etc/supervisord.conf # -c 表示根据配置文件启动 进入supervisor管理控制台。 supervisorctl -c ~/etc/supervisord.conf 问题与解决 图片上传报错 这是由于Nginx的权限问题导致的，网上大多数资料说将'Chmod 777 /media'执行就好，但是我试了不行，后来将/etc/nginx/nginx.conf中的user改成root就好了。 var className='atoc';"},"django_create.html":{"url":"django_create.html","title":"创建第一个Django应用","keywords":"","body":"创建第一个Django应用 创建项目 创建应用与细节优化 应用创建 项目细节优化 数据库配置 创建项目 创建项目目录并安装虚拟环境： yvesdeMacBook-Air:Python yves$ mkdir Propaganda // 创建项目目录 yvesdeMacBook-Air:Python yves$ cd Propaganda yvesdeMacBook-Air:Python yves$ pipenv install // 安装虚拟环境 Warning: the environment variable LANG is not set! We recommend setting this in ~/.profile (or equivalent) for proper expected behavior. Creating a virtualenv for this project… Pipfile: /Users/yves/Documents/GitHub/Python/Propaganda/Pipfile Using /usr/local/bin/python3 (3.6.4) to create virtualenv… ⠧ Creating virtual environment...Already using interpreter /usr/local/bin/python3 Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6' New python executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python3 Also creating executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python Installing setuptools, pip, wheel... done. ✔ Successfully created virtual environment! Virtualenv location: /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM Creating a Pipfile for this project… Pipfile.lock not found, creating… Locking [dev-packages] dependencies… Locking [packages] dependencies… Updated Pipfile.lock (ca72e7)! Installing dependencies from Pipfile.lock (ca72e7)… 🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. 启动开发环境并安装Django： yvesdeMacBook-Air:Propaganda yves$ pipenv shell // 启动虚拟环境 Launching subshell in virtual environment… bash-3.2$ . /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/activate (Propaganda) bash-3.2$ pipenv install Django // 安装Django Installing Django… Adding Django to Pipfile's [packages]… ✔ Installation Succeeded Pipfile.lock (12ffd6) out of date, updating to (ca72e7)… Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (12ffd6)! Installing dependencies from Pipfile.lock (12ffd6)… 🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 4/4 — 00:00:04 Django常见命令有创建项目、创建应用、创建超级用户、数据表创建及更新、启动服务器等，这些命令都包含在 django-admin.py 和 manage.py 里。除此以外 manage.py 还包含其它有用的命令，基本包含： 创建新项目：django-admin startproject project_name 创建新应用：python manage.py startapp app_name 检测模型变化生成新的数据库迁移文件：python manage.py makemigrations [app_name] 同步数据库与模型：python manage.py migrate 启动服务器：python manage.py runserver 创建超级用户：python manage.py createsuperuser 修改用户密码：python manage.py changepassword username 打开交互终端：python manage.py shell（dbshell指数据库交互） 查看当前版本：python manage.py version 清空数据库内容只留下空表：python manage.py flush 搜集静态文件：python manage.py collectstatic 创建Django项目并启动验证是否成功： (Propaganda) bash-3.2$ django-admin startproject Propaganda // 创建项目 (Propaganda) bash-3.2$ ll // 项目文件结构 drwxr-xr-x 7 yves staff 224 Dec 6 21:06 ./ drwxr-xr-x 12 yves staff 384 Dec 6 20:34 ../ -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 7 yves staff 224 Dec 6 20:56 Propaganda/ -rwxr-xr-x 1 yves staff 630 Dec 6 20:56 manage.py* (Propaganda) bash-3.2$ python manage.py runserver // 启动项目 Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. December 06, 2019 - 13:14:35 Django version 3.0, using settings 'Propaganda.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. 在浏览器输入 http://127.0.0.1:8000/ 看到Django启动页即表示项目创建成功。 创建应用与细节优化 应用创建 项目创建成功并验证通过后就可以创建相关应用： (Propaganda) bash-3.2$ python manage.py startapp chatriq 创建成功后需要在 settings.py 文件中加入相应配置： INSTALLED_APPS = [ 'chatriq' ] 项目细节优化 在项目根目录下创建 apps 包目录，用于统一管理后期创建的应用，这需要在 settings.py 文件里新增一条配置： sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) # 将apps目录加到python的搜索目录中去 修改 settings.py 文件里的配置： LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Shanghai' USE_TZ = False 在根目录下创建 static 目录用于存放静态文件，创建 templates 文件夹用于存放模板文件，并在 settings.py 文件中添加配置： STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), ) 最终，目录结构如下： (Propaganda) bash-3.2$ ll -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 8 yves staff 256 Dec 6 21:43 Propaganda/ drwxr-xr-x 4 yves staff 128 Dec 6 21:41 apps/ -rw-r--r-- 1 yves staff 0 Dec 6 21:14 db.sqlite3 -rwxr-xr-x@ 1 yves staff 630 Dec 6 20:56 manage.py drwxr-xr-x 2 yves staff 64 Dec 6 21:26 static/ drwxr-xr-x 2 yves staff 64 Dec 6 21:26 templates/ 数据库配置 在 settings.py 文件中可以配置项目连接的数据库信息，由于本项目暂时不涉及数据库相关操作。 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } 生成表迁移数据并在数据库中创建对应表文件： (Propaganda) bash-3.2$ python manage.py makemigrations No changes detected (Propaganda) bash-3.2$ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying sessions.0001_initial... OK 至此，Django项目应用创建完毕，后续更新编码过程中的细节与注意事项。 var className='atoc';"},"economic_data.html":{"url":"economic_data.html","title":"经济指标查询","keywords":"","body":"经济指标查询 数据类 表头 表头 表头 表头 表头 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 CPI指数 - 居民消费价格指数 PPI指数 - 工业品出厂价格指数 GDP指数 - 国内生产总值 PMI指数 - 采购经理人指数 存款准备金率 货币供应量（M1.M2.M0） 工业增加值 银行间拆借利率（Shibor） 新增信贷数据 中国10年期国债收益率 人民币兑美元 纽约黄金 螺纹钢 伦铜 布伦特原油 铁矿石 路透CRB商品指数 波罗的海BDI指数 美元指数 中证转债 企债指数 天天基金网 中证指数官网 智投星 - DIY定投策略 理杏仁 - 指数基金估值查询 集思录- 中国专业的低风险投资工具型社区 看财报 巨潮资讯 - 中国证监会指定的信息披露网站 果仁网 - 适合入门级的量化投资者 东方财富网 中国理财网 - 银行理财产品查询 天眼查 金银比 国家统计局 上海银行间同业拆放利率 全球经济数据 应用类 东方财富 通达信 英为行情 万得股票 天天基金 晨星网 var className='atoc';"}}