{"./":{"url":"./","title":"Eureka","keywords":"","body":"Eureka 阿基米德发现浮力原理时，国王怀疑金匠在做王冠时私吞了黄金，于是便请阿基米德想方法进行检验。阿基米德冥思苦想数日，却终究不得其解，有一日他坐进澡盆准备洗澡，看到水往外溢，霎时灵光乍现，想出了测量方法，他激动得连衣服都没顾上穿就跑到了街上，大喊着：“Eureka！Eureka！”。 从此，当人们解决了一个盘旋于心中困扰已久的重要问题或有了重大发现后，终于有了一个词可以让他们在一瞬间释放自己的狂喜和雀跃：Eureka！ 初衷 之前学习新知识、新概念陷入一个比较大的误区，总是花费较多时间去熟识理念层面的内容，不料有些内容今天了解了，明天就忘了，更是缺乏笔记性的资料与实际操作，免不了如过眼云烟转瞬即逝。零碎写过的一些笔记，不系统且保管不善，自己知道明明学习过、总结过的知识，到使用时硬是找不到，不免些许遗憾。于是打算弄一个类似于图书馆的地方统一保管，以便使用时及时查询。 同时，强制自己按时做一些事情，稍微克服本身存在的散漫习性，不要三天打鱼两天晒网，巩固习得性成果，养成持续学习、持续输出的习惯，正所谓纸上得来终觉浅，绝知此事要躬行。 联系 时间有限，经历有限，最好不要联系我，更不要加什么微信，加了无非就是通讯录多个图标而已，没有意义。何况我不喜欢被打扰，尤其不喜欢工作时间被碎片化，至今我的手机一直都是处于静音状态，任何软件都是禁止通知状态。 如果你确实需要联系我，比如获取相关资源，咨询技术问题，请发邮件，地址：yves1012@163.com 。 祝你平安喜乐！ var className='atoc';"},"navigation.html":{"url":"navigation.html","title":"快速导航","keywords":"","body":"快速导航 技术 娱乐休闲 财经 指数 跨境电商 亚马逊 独立站 收款 信息资讯 技术 纯CSS table表格 thead固定 tbody滚动 --> GitHub gitee 阿里云 腾讯云 华为云 蓝奏云 七牛云 搬瓦工 Vultr GoDaddy Auto.js 按键精灵 八爪鱼 WordPress 极客时间 和鲸社区 Kaggle Numpy Pandas 莫烦Python IPChecker WHOER 娱乐休闲 一起看 知乎 腾讯体育 微博 豆瓣 知识星球 小红圈 哔哩哔哩 电影天堂 今日热榜 财经 晨星网 集思录 网易财经 非小号 也谈钱 理杏仁 天天基金网 东方财富网 智投星 看财报 巨潮资讯 果仁网 中国理财网 金银比 国家统计局 全球经济数据 指数 中证指数 CPI指数 PPI指数 GDP指数 PMI指数 存款准备金率 货币供应量 工业增加值 银行间拆借利率 新增信贷数据 中国10年期国债收益率 人民币兑美元 纽约黄金 螺纹钢 伦铜 布伦特原油 铁矿石 路透CRB商品指数 波罗的海BDI指数 美元指数 中证转债 企债指数 银行间同业拆放利率 跨境电商 亚马逊 AMZ123 AMZ520 美国站 谷歌趋势 美标查询 Helium10 GEMs URL 欧税通 BYKOL 聚评论 海关编码 Pulse 独立站 Shopify ThemeForest ActiveWear 收款 PingPong 信息资讯 DHL FedEx UPS 企查查 中国裁判文书网 DeepL 青创网 风火递 Bigjpg TinyPNG 致设计 站酷 remove.bg Does Not Exist Logo制作 字体天下 美国身份证 Fiverr 互站网 偏门项目 达克自学 生财有术 优质资源 网盘精灵 Pixabay Apkpure 跟徐sir学PS var className='atoc';"},"google_hacking.html":{"url":"google_hacking.html","title":"Google Hacking语法","keywords":"","body":"Google Hacking语法 关键词 通配符 关键词 关键词 说明 site 搜索范围限制在该域名中，例如：“site:www.4ngel.net”将返回所有和该站有关的链接 inurl 搜索指定的字符是否存在于URL中，例如：“inurl:admin”将返回N个包含admin字符的链接 filetype 搜索特定类型文档，例如：“filetype:doc”将返回所有以doc结尾的文件URL intext 正文中搜索某个字符，例如：“intext:中国”将返回所有在网页正文部分包含”中国”的链接 intitle 标题中搜索某个字符，例如：“ntitle:安全天使”将返回所有网页标题中包含”安全天使”的链接 cache 搜索谷歌缓存页面 define 查询单词或者术语的定义，例如：“define:hacker”将返回关于hacker的定义 info 查找指定站点的一些基本信息 link 搜索所有链接到某个URL地址的网页，例如：“link:www.4ngel.net”将返回所有和该网址做了连接的链接 inanchor 锚链链接搜索在做网站中有时候用锚点来链接一个页面中的其它部分内容，这样方便浏览和定位，也就是说锚点链接的内容通常是网页内容中重要的章节或内容的开始部分，因而对它们的搜索也更能反映网页的主题内容，提高搜索结果的准确度 related 相关网址查找与某个页面结构内容相似的页面，“related”用来搜索结构内容方面相似的网页，比如当你用related搜索一个图书馆网址的时候会出来大量图书馆的网站，如：related:lib.nit.net.cn 通配符 通配符 说明 “” 在关键词加双引号会实现精确搜索，不进行分词 ※ 谷歌的通配符星号“*”必须在精确搜索符双引号内使用，用通配符代替关键词或短语中无法确定的词 . 与通配符星号“*”不一样的是，点号“.”匹配的是字符，不是字、短语等内容 .. 两个点号“..”表示一个数字范围，一般应用于日期、货币、尺寸、重量、高度等范围的搜索 + 加号“+”用于强制搜索，即必须包含加号后的内容，一般与精确搜索符一起应用 - 关键词前加“-”减号，要求搜索结果中包含关键词，但不包含减号后的关键词 () 括号“()”是分组符号 var className='atoc';"},"economic_data.html":{"url":"economic_data.html","title":"经济指标查询","keywords":"","body":"经济指标查询 数据类 表头 表头 表头 表头 表头 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 CPI指数 - 居民消费价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 PPI指数 - 工业品出厂价格指数 CPI指数 - 居民消费价格指数 PPI指数 - 工业品出厂价格指数 GDP指数 - 国内生产总值 PMI指数 - 采购经理人指数 存款准备金率 货币供应量（M1.M2.M0） 工业增加值 银行间拆借利率（Shibor） 新增信贷数据 中国10年期国债收益率 人民币兑美元 纽约黄金 螺纹钢 伦铜 布伦特原油 铁矿石 路透CRB商品指数 波罗的海BDI指数 美元指数 中证转债 企债指数 天天基金网 中证指数官网 智投星 - DIY定投策略 理杏仁 - 指数基金估值查询 集思录- 中国专业的低风险投资工具型社区 看财报 巨潮资讯 - 中国证监会指定的信息披露网站 果仁网 - 适合入门级的量化投资者 东方财富网 中国理财网 - 银行理财产品查询 天眼查 金银比 国家统计局 上海银行间同业拆放利率 全球经济数据 应用类 东方财富 通达信 英为行情 万得股票 天天基金 晨星网 var className='atoc';"},"English_plan.html":{"url":"English_plan.html","title":"英语学习安排","keywords":"","body":"英语学习安排 练习方法 进度记录 单词俚语与语法 现在的最大的问题就是听不懂，尤其不大明白native speaker说的内容，至于阅读与写作倒是马马虎虎，因而下定决心要好好增强下自己的听力与口语能力。以前用的一些方法，例如泛听等等都不大奏效，近来发现一个比较好的成功案例，下决心实践一下。 练习方法 YouZack英语听力逐句精听 第一遍从头到尾听，不要看字幕。 第二遍再从头到尾听，遇到第一遍没听懂的这个句子，你点一下【这句听不懂】按钮，但是这时候也不要暂停，还是一路从头走到尾，把这段里边所有的没听懂的句子都点完了【这句听不懂】之后。 第三遍看每一句【这句听不懂】的原文，这个原文里边不懂的单词、不懂的语法就去查，搞明白了之后，然后就闭着眼不看字幕，把一句话反复去听直到能够听懂为止，再听下一句话。 所有的句子都听懂了之后，然后从头到尾再不看字幕、不暂停的把音频听一遍，如果发现还是有不懂的再重复以上步骤，直到这一段音频能够懂为止。 进度记录 练习材料 开始时间 进度 效果评价 新概念第一册 2021-1-9 开始练习 完全能听懂，完全能理解，主要是材料难度太低 单词俚语与语法 记录听力练习过程中发现的不认识的单词俚语或者语法现象 var className='atoc';"},"independent_station.html":{"url":"independent_station.html","title":"多维度解读跨境电商独立站","keywords":"","body":"多维度解读跨境电商独立站 建站的3大主流方式 WordPress WooCommerce Shopify Magento 主体身份 中国公司 香港公司 美国公司 个人 两种经营模式 常规站点 商机站点 两种主流收款方式 PayPal Stripe 仓储发货模式 自备货自发货 Dropshipping发货 引流渠道 几点误区 建站太复杂了 独立站就没有侵权风险了 网站缺胳膊少腿 Dropshipping采购 拍住赏Tap&Go虚拟卡采购 Payoneer万事达实体卡采购 其他外币信用卡或借记卡采购 经营跨境电商独立站，需要解决诸多方面的问题，例如：语言障碍、网络访问障碍、收款障碍，物流运输障碍等；此外，流量获取则是独立站成功与否的重中之重，而流量来源无非集中在：Google、Facebook与YouTube。 建站的3大主流方式 三大建站方式占据了独立站市场总量的56%，至于图中展示的Other所占高达38%的原因无非就是某些平台自己开发独立站系统，比如苹果。 WordPress WooCommerce WooCommerce实际上是WordPress的一款开源电子商务插件。它和WordPress一起工作，由于开源特性，你可以自由扩展网站的各个方面，让你拥有自身店铺的绝对控制权，数以万计的免费和付费WordPress扩展插件提供功能支持。WooCommerce插件由WordPress官方团队Automattic负责更新维护。 WooCommerce基本包括了在线商城所需要的功能，产品列表，购物车，商品类目，会员功能，支付功能，库存管理功能，销售记录功能，还有优惠券功能等等。通过简单的配置可以迅速搭建起一个电子商务网站。 Shopify Shopify一个让用户自主管理在线商店的平台，本身并不参与卖货，也不处理打包发货仓储这些事情。Shopify可以被理解为一个电子商务网站的自助搭建平台。卖家在Shopify网站上注册一个店铺账号，通过系统内置的一系列模版和程序，绑定自己的独立域名，即可完成整个独立网站的搭建，卖家只需要按月支付最低29美元的平台使用费用即可。 Shopify的特点即是简单易用。卖家不必懂得如何编程，如何设计网页。卖家所需要的东西，Shopify都帮你准备好了。熟练的卖家完全可以在一天时间内利用Shopify搭建出一个足够专业美观，功能齐全的品牌电子商务网站。 Magento 作为全球功能最强大的电商开源程序，Magento能做的事情是其他任何一个开源电商程序所无法比拟的。Magento可以做多店铺平台、可以做多语言电商门户、可以多币种多收款渠道接入支付、可以API无缝对接各类ERP系统等等。Magento适合规模化电商网站，适合海量SKU，并不适合新卖家或者对技术方面并不熟悉的卖家。 主体身份 独立自建站对于经营主体身份并没有过多的限制，无论是个人、国内公司、香港公司、美国公司都可以运营独立站。独立站没有门槛、更加自由的特点也让很多个人卖家能够快速上手。当然，独立站运营上的很多细节工作也受运营主体身份限制，比如可信度方面，显然个人身份和美国公司身份有明显区别；比如收款方面，能否接入Stripe收款，比如营销推广方面，要知道很多渠道并不接受个人身份，等等。 中国公司 中国公司身份是目前国内卖家使用的最多的运营主体，但因为独立站收款环节，也会收到很多限制。比如无法接入Stripe信用卡收款通道，比如PayPal收款后，美元外币得提现到国内银行对公账号，对公账号就少不了开美元账号，这又涉及到银行监管备案之类的琐事。实际上也没多少人真的这么做，一般PayPal收款后，提现美元到Payoneer账户中，再转人民币到国内，减少不必要的麻烦。 香港公司 香港在“国际贸易自由”及“监管”上的上佳口碑，排列全球首位。最近fraser institute新公布的《世界经济自由度2019年度报告》中，香港再获评为全球最自由经济体，这种自由不是随便说说而已，而是体现在方方面面。当然，香港公司的注册与维护成本又会比国内公司要高的多。 美国公司 在跨境电商行业，美国公司身份是最有价值的运营主体。你不能入驻的平台，美国公司可以入驻；你不能开设的收款通道，美国公司可以开设；你不能销售的品类，美国公司可以销售。当然，从信誉角度来说，以美国公司身份本土化开设经营的独立自建站更能够让客户信任。 个人 个人身份的自由度如同独立站的特点一样，进可攻，退可守。特别是结合Dropshipping方式来做，不用自己备货，不用自己打包发货，不用注册公司，经营风险也会小很多。但个人身份实在谈不上专业，也不适合以此为主营业务的跨境电商专业卖家。实际上，个人身份经营更加适合刚入门，试水跨境电商独立站。 两种经营模式 常规站点 常规站点是比较中规中矩的做法，适合专门销售自己品牌的产品或者干脆大量铺货的产品，可以理解为品牌专卖店或者杂货铺。 商机站点 商家站点也叫利基站点，英文名Niche，是众多跨境电商独立站卖家的选择。简单点说，Niche站点所销售的产品是通过选品软件或按照一定的选品策略，从行业细分市场中精挑细选出来的那些市场需求相对较大、竞争相对较小的产品。也就是根据选品来建站，根据选品来做推广的一种站点。这也是目前跨境电商独立站市场上采用最广泛的建站策略。 商机（利基）站点的好处很多，其最核心的要点在于选品。选品的好坏也决定了站点的生命周期、销售量以及收益情况。选品并没有绝对的标准，不过我们还是习惯性的列出一些参考依据，试图在开始时就减少选品错误到来的风险，比如： 两种主流收款方式 PayPal PayPal是全球范围内使用量最广泛的在线收款工具，没有之一。 PayPal是名副其实的舶来品，时至今日，仍然如此。PayPal早在2004年的时候就进入中国，成立了美银宝信息技术（上海）有限公司。不过受金融牌照政策与本地化策略影响，PayPal发展迟缓，始终未能在中国市场有所突破。 Stripe Stripe由来自爱尔兰的Patrick Collison与其弟弟John Collison在2010年创建，总部在旧金山。Stripe专注于网络支付，为中小型企业和个人提供在线支付服务，通过收取费率和手续费方式盈利（每笔交易收取2.9%费率 + 30美分统一手续费）。 对跨境电商卖家来说，Stripe为跨境电商自建站提供了高效便捷的信用卡收款方式。但很可惜的是，Stripe的这项服务并未向中国开放，也就说，如果你想使用Stripe的信用卡支付渠道，还得想点办法。 仓储发货模式 自备货自发货 自备货意味着提前采购，准备仓储场地，必要的成本投入；自发货意味着需要花费时间精力去打包发货；而订单不多的话，物流价格也不会有什么优惠；而当你经营一段时间后，会逐渐累积起越来越多的库存，产品也会出现滞销。 Dropshipping发货 Dropshipping代发货模式是一个比较受跨境电商卖家欢迎的商业模式。不需要高昂的启动资金、不需要提前备足库存，不需要自己打包发货，管理也很灵活方便。当然，Dropshipping同样也有一堆的缺点，所以，当你的Dropshipping业务已经达到了一定高度的时候，通过自备货自发货方式反而能降低更多成本、保证物流时效以及保障产品品质，提高客户体验。 引流渠道 新建的独立站本身并没有流量，也谈不上出单。引流是独立站工作的重心，是重中之重。如何引流并没有什么标准答案，但大多数流量来源集中在Goolge、YouTube、Facebook三大巨头，当然，还有很多其他的，像reddit.com、pinterest.com、instagram.com、wikipedia.org、quora.om等等。流量又分了免费流量和付费流量，独立站想要快速出单，大多得依靠付费流量达成，多数卖家耗不起Google SEO的自然流量，这得依靠日积月累的网站权重、高质量外链以及迎合极其复杂的google seo算法对网站和内容所做出的各种改进工作。 几点误区 建站太复杂了 实际上，建站并不是复杂。使用Shopify建站只需要十几分钟；而使用WooCommerce建站方式对于没有代码经验的人来说，参考教程也能很快搭建成功。 独立站就没有侵权风险了 不少卖家搭建独立站的目的就是为了做仿品，平台不让卖的或者要严格审查的，或者要商标授权的，独立自建站都可以卖。但是，必须得明确，独立站同样是存在侵权风险。如何你使用的Shopify这种SaaS平台搭建独立站，就尽量侵权产品远一些，Shopify因为侵权封账号可从来不手软。Shopify和亚马逊一样，有着严格的商品销售政策条款，禁止销售任何假冒伪劣、危害性、或违反当地市场法律法规的产品。同样，也接受权益人的投诉，或对其他人的投诉进行申诉。 至于WooCommerce，虽然没有Shopify那么严格。但网站同样会因为侵权行为，被权益人律师函或者向美国法院申请临时禁制令要求服务器提供商关闭网站，要求域名注册商停止解析，要求PayPal、Stripe等收款通道冻结账号等等。 网站缺胳膊少腿 社交媒体链接、字体样式、英文大小写、隐私政策、退款政策、地址电话沟通方式等等细节能反映出独立站的精细化程度，这些东西是最容易被独立站卖家们忽略的，而往往这些东西直接影响到网站的信用度以及订单转化率。当你真金白银付出大量广告成本进行站外引流时，发现只有流量，却没有订单，低的出奇的转化率让人怀疑人生。如果这时候，你再回过头来检查一下网站的这些看似不起眼的基础，就不难理解转化率为什么这么低了。 Dropshipping采购 Dropshipping是独立站经营的一种方式，Dropshipping用户比较多的会通过速卖通采购，但很多卖家会碰到速卖通并不支持国内的信用卡支付，无法完成速卖通下单采购。 拍住赏Tap&Go虚拟卡采购 拍住赏是香港电讯集团旗下的HKT Payment Limited公司推出的一款电子钱包，中国大陆的用户可以通过手机app申请，并自动签发万事达和银联两种虚拟卡。然后，你就可以拿着这个万事达虚拟卡在速卖通上下单采购了。 Payoneer万事达实体卡采购 Payoneer已然成为中国跨境卖家必备收款工具，无论是入驻平台收款，还是独立站收款，甚至速卖通采购，Payoneer都能轻松搞定。申请Payoneer账户没有门槛，几乎任何人都可以免费申请。但要获得Payoneer签发的万事达实体卡，则必须账户内要有40美元余额。Payoneer签发的万事达实体卡有激活费、年费，实际上并不便宜。 另外，Payoneer的美国银行收款账户可以用来PayPal账户余额提现。独立站采用PayPal收到的钱，无论是个人还是企业开的PayPal，都可以提现到Payoneer的个人账户上。这时候，你就可以用Payoneer实体卡在速卖通上采购了产品了，或者直接提现到国内的个人银行账户。 其他外币信用卡或借记卡采购 应该说，大多数海外银行签发的信用卡或者借记卡都可以在速卖通上下单采购。实际上，速卖通也并非故意要拒绝Dropshipping卖家合理的下单采购需求，猜测其主要原因还是为了避免速卖通卖家刷单，境外的卡片至少能提高一些刷单的门槛，所以，比不太担心下单采购被拒的情况。据了解，速卖通也向一些第三方的合作服务商开放了批量下单采购的API通道，方便Dropshipping卖家采购。 var className='atoc';"},"vps.html":{"url":"vps.html","title":"搭建愉快服务器","keywords":"","body":"搭建愉快服务器 免费or收费 远程连接工具 安装搭建脚本 小飞机下载 免费or收费 网上有很多免费的科学上网工具，但一般带宽设限使用时相当慢，其次则是客户端广告较多影响体验。因此比较推荐购买 VPS 主机资源进行服务器搭建。 国内市占率较高的主要有两家，分别是 搬瓦工 与 Vultr ，两者之间的主要区别在于：前者是按年或月收费，后者则按照使用时长收费。 购买链接： 搬瓦工购买链接 Vultr购买链接 远程连接工具 下载SecureCRT远程连接软件，安装后使用。 安装搭建脚本 使用Secure CRT工具连接成功后，粘贴下面的命令进行操作： [root@vultr ~]# yum install -y wget && wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh && bash shadowsocks-libev.sh 回车后系统会自行下载脚本文件并运行，按照下图提示，我们输入1选择安装服务，回车继续： 2020-01-12 15:44:00 (51.7 MB/s) - ‘shadowsocks-libev.sh’ saved [21414/21414] ============================================== Shadowsocks Server Management Script (libev) ============================================== 1. Shadowsocks Server Install 2. Shadowsocks Server Uninstall 3. Shadowsocks Server Update ---------------------------------------------- 4. Shadowsocks Server Start 5. Shadowsocks Server Stop 6. Shadowsocks Server Restart ---------------------------------------------- 7. Shadowsocks Config Status 8. Shadowsocks Config Modify ============================================== Not installed Please Enter the Number:1 回车后系统会进入安装界面，我们首先依次输入 SS 的各项信息，然后回车继续即可： [Info] Start set shadowsocks's config information... [Info] Wherever you are not sure, just press Enter to continue. Please enter shadowsocks's password [Default is 123456]: ------------------------------- Shadowsocks's Password: 123456 ------------------------------- Please enter shadowsocks's port (1~65535) [Default is 33526]: ------------------------------- Shadowsocks's Port: 33526 ------------------------------- Please select shadowsocks's stream cipher 1) aes-256-gcm 2) aes-256-ctr 3) aes-256-cfb 4) chacha20-ietf-poly1305 5) chacha20-ietf 6) chacha20 7) rc4-md5 [Default is aes-256-gcm]:3 ------------------------------- Shadowsocks's Streamcipher: aes-256-cfb ------------------------------- Press Enter to continue...or Press Ctrl+C to cancel 安装过程耗时 2~5 分钟，完成后会来到下图界面： [Info] Congratulations, Shadowsocks has been installed successfully. ================================================= Server IP : 1.1.1.1 Server Port : 33526 Password : 123456 Encryption Method: aes-256-cfb ------------------------------------------------- ss://YWVzLTI1Ni1jZmI6TnVtYmVyMTQzMzIyM0AxNDkuMjguMTMyLjEzMzo5NTI2 ================================================= You can find the config's backup in /root/shadowsocks.txt. For more tutorials: https://www.banwagongzw.com & https://www.vultrcn.com 接下来需要安装锐速TCP加速软件，由于系统自带内核版本太高无法安装锐速，需要进行降级，复制命令进行操作： [root@vultr ~]# wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh 回车后系统会自动下载脚本并执行更换内核命令，按图提示，我们可以看到当前系统为CentOS7，等待内核更换完毕后系统会自动重启并断开连接： [INFO] System OS is CentOS7. Processing... ------------------------------------------- Retrieving https://filedown.me/Linux/Kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm Preparing... ################################# [100%] Updating / installing... 1:kernel-3.10.0-229.1.2.el7 ################################# [100%] ------------------------------------------- [INFO] Success! Your server will reboot in 3s... [INFO] Success! Your server will reboot in 2s... [INFO] Success! Your server will reboot in 1s... [INFO] Reboot... 系统重启后，软件会断开连接，等待3分钟左右服务器即可重启完毕，我们重新连接服务器，按图提示，我们继续复制命令： // [root@vultr ~]# yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh 回车后系统会自动下载脚本并执行，按图提示，我们直接回车继续即可： Local Time : 2020-01-12 [16:00:09] ====================================================== | serverSpeeder | | for Linux | |----------------------------------------------------| | -- By .Vicer | ====================================================== Preparatory work... Press Enter to Continue... Preparatory work... Press Enter to Continue... Archive: /tmp/appex.zip inflating: /tmp/appex/install.sh creating: /tmp/appex/apxfiles/ creating: /tmp/appex/apxfiles/bin/ inflating: /tmp/appex/apxfiles/bin/renewLic.sh inflating: /tmp/appex/apxfiles/bin/serverSpeeder.sh inflating: /tmp/appex/apxfiles/bin/setConfig.sh inflating: /tmp/appex/apxfiles/bin/showConfig.sh inflating: /tmp/appex/apxfiles/bin/update.sh inflating: /tmp/appex/apxfiles/bin/utils.sh creating: /tmp/appex/apxfiles/etc/ inflating: /tmp/appex/apxfiles/etc/config Lic generate success! Installation done! 回车继续后系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息，按图提示，我们每次都直接回车继续即可： ---- You are about to be asked to enter information that will be used by ServerSpeeder, there are several fields and you can leave them blank, for all fields there will be a default value. ---- Accelerate VPN (PPTP,L2TP,etc.)? [n]: Auto load ServerSpeeder on linux start-up? [y]: /etc/centos-release:CentOS Linux release 7.7.1908 (Core) /etc/os-release:NAME=\"CentOS Linux\" /etc/os-release:PRETTY_NAME=\"CentOS Linux 7 (Core)\" /etc/os-release:CENTOS_MANTISBT_PROJECT=\"CentOS-7\" /etc/redhat-release:CentOS Linux release 7.7.1908 (Core) /etc/system-release:CentOS Linux release 7.7.1908 (Core) Run ServerSpeeder now? [y]: 设置完三项信息完成后，系统会完成锐速安装并输出锐速的运行状态，按图提示，当出现红框内信息时说明锐速已完成安装并开机自启动： (license 628A71EDC5706E97151885d3) [Running Status] ServerSpeeder is running! version 3.11.20.10 [License Information] License 628A71EDC5706E97 (valid on current device) MaxSession unlimited MaxTcpAccSession unlimited MaxBandwidth(kbps) 1024000 ExpireDate 2035-12-31 在使用的过程中如果需要修改相关的配置信息，请使用下面的命令： 附一、修改Shadowsocks的配置信息 如果你以后需要修改Shadowsocks的配置（比如密码、端口或者加密），可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 8 项：修改Shadowsocks配置即可重新设置Shadowsocks的密码、端口以及加密方式。 附二、卸载Shadowsocks服务 如果你以后需要卸载Shadowsocks服务，可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 2 项：卸载Shadowsocks服务即可从服务器中卸载掉Shadowsocks服务。 小飞机下载 安装完成后，需要在我们需要科学上网的设备上安装相应软件来连接，下载Shadowsocks小飞机，安装后使用。 var className='atoc';"},"django_create.html":{"url":"django_create.html","title":"创建第一个Django应用","keywords":"","body":"创建第一个Django应用 创建项目 创建应用与细节优化 应用创建 项目细节优化 数据库配置 创建项目 创建项目目录并安装虚拟环境： yvesdeMacBook-Air:Python yves$ mkdir Propaganda // 创建项目目录 yvesdeMacBook-Air:Python yves$ cd Propaganda yvesdeMacBook-Air:Python yves$ pipenv install // 安装虚拟环境 Warning: the environment variable LANG is not set! We recommend setting this in ~/.profile (or equivalent) for proper expected behavior. Creating a virtualenv for this project… Pipfile: /Users/yves/Documents/GitHub/Python/Propaganda/Pipfile Using /usr/local/bin/python3 (3.6.4) to create virtualenv… ⠧ Creating virtual environment...Already using interpreter /usr/local/bin/python3 Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6' New python executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python3 Also creating executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python Installing setuptools, pip, wheel... done. ✔ Successfully created virtual environment! Virtualenv location: /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM Creating a Pipfile for this project… Pipfile.lock not found, creating… Locking [dev-packages] dependencies… Locking [packages] dependencies… Updated Pipfile.lock (ca72e7)! Installing dependencies from Pipfile.lock (ca72e7)… 🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. 启动开发环境并安装Django： yvesdeMacBook-Air:Propaganda yves$ pipenv shell // 启动虚拟环境 Launching subshell in virtual environment… bash-3.2$ . /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/activate (Propaganda) bash-3.2$ pipenv install Django // 安装Django Installing Django… Adding Django to Pipfile's [packages]… ✔ Installation Succeeded Pipfile.lock (12ffd6) out of date, updating to (ca72e7)… Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (12ffd6)! Installing dependencies from Pipfile.lock (12ffd6)… 🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 4/4 — 00:00:04 Django常见命令有创建项目、创建应用、创建超级用户、数据表创建及更新、启动服务器等，这些命令都包含在 django-admin.py 和 manage.py 里。除此以外 manage.py 还包含其它有用的命令，基本包含： 创建新项目：django-admin startproject project_name 创建新应用：python manage.py startapp app_name 检测模型变化生成新的数据库迁移文件：python manage.py makemigrations [app_name] 同步数据库与模型：python manage.py migrate 启动服务器：python manage.py runserver 创建超级用户：python manage.py createsuperuser 修改用户密码：python manage.py changepassword username 打开交互终端：python manage.py shell（dbshell指数据库交互） 查看当前版本：python manage.py version 清空数据库内容只留下空表：python manage.py flush 搜集静态文件：python manage.py collectstatic 创建Django项目并启动验证是否成功： (Propaganda) bash-3.2$ django-admin startproject Propaganda // 创建项目 (Propaganda) bash-3.2$ ll // 项目文件结构 drwxr-xr-x 7 yves staff 224 Dec 6 21:06 ./ drwxr-xr-x 12 yves staff 384 Dec 6 20:34 ../ -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 7 yves staff 224 Dec 6 20:56 Propaganda/ -rwxr-xr-x 1 yves staff 630 Dec 6 20:56 manage.py* (Propaganda) bash-3.2$ python manage.py runserver // 启动项目 Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. December 06, 2019 - 13:14:35 Django version 3.0, using settings 'Propaganda.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. 在浏览器输入 http://127.0.0.1:8000/ 看到Django启动页即表示项目创建成功。 创建应用与细节优化 应用创建 项目创建成功并验证通过后就可以创建相关应用： (Propaganda) bash-3.2$ python manage.py startapp chatriq 创建成功后需要在 settings.py 文件中加入相应配置： INSTALLED_APPS = [ 'chatriq' ] 项目细节优化 在项目根目录下创建 apps 包目录，用于统一管理后期创建的应用，这需要在 settings.py 文件里新增一条配置： sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) # 将apps目录加到python的搜索目录中去 修改 settings.py 文件里的配置： LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Shanghai' USE_TZ = False 在根目录下创建 static 目录用于存放静态文件，创建 templates 文件夹用于存放模板文件，并在 settings.py 文件中添加配置： STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), ) 最终，目录结构如下： (Propaganda) bash-3.2$ ll -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 8 yves staff 256 Dec 6 21:43 Propaganda/ drwxr-xr-x 4 yves staff 128 Dec 6 21:41 apps/ -rw-r--r-- 1 yves staff 0 Dec 6 21:14 db.sqlite3 -rwxr-xr-x@ 1 yves staff 630 Dec 6 20:56 manage.py drwxr-xr-x 2 yves staff 64 Dec 6 21:26 static/ drwxr-xr-x 2 yves staff 64 Dec 6 21:26 templates/ 数据库配置 在 settings.py 文件中可以配置项目连接的数据库信息，由于本项目暂时不涉及数据库相关操作。 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } 生成表迁移数据并在数据库中创建对应表文件： (Propaganda) bash-3.2$ python manage.py makemigrations No changes detected (Propaganda) bash-3.2$ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying sessions.0001_initial... OK 至此，Django项目应用创建完毕，后续更新编码过程中的细节与注意事项。 var className='atoc';"},"django_deploy.html":{"url":"django_deploy.html","title":"Django应用部署与监控","keywords":"","body":"Django应用部署与监控 部署准备 环境搭建 新增用户 Python环境 MySQL数据库 部署代码 Gunicorn安装 Nginx安装 Supervisor安装 问题与解决 图片上传报错 部署准备 一台云服务器，初级版（1核1G）即可，安装CentOS7.2版本操作系统，建议最好使用阿里云；一个已经完成ICP备案的域名。 环境搭建 新增用户 操作CentOS服务器，最好不要使用root根用户，其一是防止误操作；其二是避免在部署的过程中出现权限相关问题。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ adduser yves # 添加yves用户 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ passwd yves # 设置yves的操作密码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ usermod -aG wheel yves # 将yves添加到超级权限组 Python环境 安装Python环境之前，需要在操作系统上安装必要软件并更新yum源。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum update # 更新yum源 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum upgrade [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc # 安装必要软件 这个步骤需要一定时间，耐心等待完成之后再进行下一步的安装Python-3.6.4。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir src # 家目录下新建src目录存放下载文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd src # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz # 下载Python-3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ tar -zxvf Python-3.6.4.tgz # 解压 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd Python-3.6.4 # 进入解压目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ ./configure LD_RUN_PATH=/usr/local/lib LDFLAGS=\"-L/usr/local/lib\" CPPFLAGS=\"-I/usr/local/include\" [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ make LD_RUN_PATH=/usr/local/lib # 编译 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo make install # 安装 上述下载、编译、安装等操作完成后，需要验证是否安装成功，出现下列版本信息即表示安装成功。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ python3 -V Python 3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip3 -V pip 19.3.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6) 安装最好用的python虚拟环境和包管理工具pipenv。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo pip3 install pipenv 问题：sudo: pip3: command not found 在环境变量中添加 alias sudo='sudo env PATH=$PATH' 并使其生效即可。 MySQL数据库 CentOS默认安装mariadb数据库，首先你需要卸载. [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ yum remove mariadb-libs.x86_64 安装MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/src/ # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm # 下载安装依赖文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install mysql-community-server # 安装MyS数据库 MySQL数据库的相关操作。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld start # 启动 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld stop # 停止 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld restart # 重启 查看MySQL数据库的初始密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cat /var/log/mysqld.log | grep password 登录MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mysql -uroot -p 修改MySQL数据库密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ SET PASSWORD = PASSWORD('123456'); 开启远程连接 mysql> show databases; mysql> use mysql; mysql> show tables; mysql> select Host, User from user \\G; mysql> update user set host = '%' where user = 'root'; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql> flush privileges; Query OK, 0 rows affected (0.00 sec) 开启genelog mysql> set global general_log_file=\"/tmp/general.log\"; mysql> set global general_log=on; 创建用户 mysql> create user 'imooc'@'%' identified by '123456'; 赋于用户权限 mysql> grant all privileges on *.* to 'imooc'@'%' identified by '123456' with mysql> grant option; # 所有权限 mysql> grant select on *.* to 'imooc'@'%' identified by '123456' with grant option; # 查询权限 mysql> revoke all privileges on *.* from imooc; # 收回权限 mysql> flush privileges; 忘记密码 [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 添加skip-grant-tables mysql> show databases; mysql> user mysql; mysql> update user set authentication_string = password(\"123456\") where user = 'root'; [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 去除skip-grant-tables [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo service mysqld restart 部署代码 将项目代码上传到部署目录下，方法比较多，推荐使用Git进行代码版本的管理，首先需要在服务器上安装相关应用并从远程仓库拉取代码，拉取完成后修改成生产环境的配置。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install git # 安装git应用 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir ~/apps/ # 创建项目部署目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/apps/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ git clone '远程仓库地址' # 拉取代码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd '项目目录' [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install --deploy --ignore-pipfile # 安装所需依赖 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py migrate # 创建数据库 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py runserver 0.0.0.0:8000 # 启动服务 服务启动后，即可以通过公网IP:8000端口访问应用，注意：务必在阿里云管理控制台放开8000端口，否则无法访问。 Gunicorn安装 直接使用runserver命令启动的开发服务器并不适用与生产环境，因此使用Gunicorn作为生产环境服务器。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install gunicorn # 安装gunicorn [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 0.0.0.0:8000 # 项目目录下启动 启动服务后，即可以通过公网IP:8000端口访问应用，但此时css样式全部未加载导致页面乱的一塌糊涂，这并非bug，而是由于处理静态文件请求并不是Gunicorn擅长的事情，应该交由更专业的Nginx去做。 Nginx安装 Nginx是一个高性能的HTTP和反向代理web服务器，它的功能非常多，这里主要用它来处理静态文件以及将非静态文件的请求反向代理给Gunicorn。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install epel-release -y [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install nginx -y # 安装Nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl start nginx # 启动nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl stop nginx # 停止nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl restart nginx # 重启nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ 直接在浏览器输入公网IP，看到nginx欢迎页面即表示安装并启动成功。下面就是修改应用中的settings.py配置文件，推荐Djecrety生成一个一个线上环境的SECRET_KEY。 DEBUG = False ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '公网IP或域名'] SECRET_KEY = ’***‘ STATICFILES_DIRS # 注释 STATIC_ROOT = os.path.join(BASE_DIR, 'static') # 新增 将项目的静态资源统一收集到static目录下。 pipenv run python manage.py collectstatic Nginx的配置位于/etc/nginx/nginx.conf文件中，其中项目的配置文件可以在/etc/nginx/conf.d/目录下新增，但是必须以.conf后缀结尾。 server { charset utf-8; listen 80; server_name 公网IP或域名; location /static { alias 绝对路径; } location /media { alias 绝对路径; } location / { proxy_set_header Host $host; proxy_pass http://127.0.0.1:8000; } } 配置文件新增完成之后，重启Nginx即可访问应用，至此基本完成Nginx与Gunicorn部署Django应用的目标。 Supervisor安装 由于服务器与网络存在不稳定的情况，因此直接在控制台启动应用的方式存在宕机的风险，并且没办法对相关进程进行监控，因此使用Supervisor来管理Gunicorn进程，这样当服务器重新启动或者Gunicorn进程意外崩溃后，Supervisor会帮我们自动重启Gunicorn。 由于Supervisor目前还不支持Python3，因此需要使用CentOS系统自带的python2版本进行安装。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip install supervisor 在家目录下新建相关的文件夹。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/conf.d # 创建配置文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/var/log # 创建日志文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/etc/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ echo_supervisord_conf > supervisord.conf # 生成supervisor配置文件 修改supervisor.conf，让Supervisor进程产生的一些文件生成到上面我们创建的目录下，而不是其默认指定的地方。 [unix_http_server] file=/home/yves/etc/supervisor/var/supervisor.sock logfile=/home/yves/etc/supervisor/var/log/supervisord.log pidfile=/home/yves/etc/supervisor/var/supervisord.pid user=yves [supervisorctl] serverurl=unix:///home/yves/etc/supervisor/var/supervisor.sock files=/home/yves/etc/supervisor/conf.d/*.ini 配置修改完成之后需要在conf.d文件夹下新增应用的配置文件，注意文件必须以.ini结尾。 [program:projectname] command=pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 127.0.0.1:8000 directory=/home/yves/apps/projectname autostart=true autorestart=unexpected user=yves stdout_logfile=/home/yves/etc/supervisor/var/log/projectname-stdout.log stderr_logfile=/home/yves/etc/supervisor/var/log/projectname-stderr.log 启动supervisor。 supervisord -c ~/etc/supervisord.conf # -c 表示根据配置文件启动 进入supervisor管理控制台。 supervisorctl -c ~/etc/supervisord.conf 问题与解决 图片上传报错 这是由于Nginx的权限问题导致的，网上大多数资料说将'Chmod 777 /media'执行就好，但是我试了不行，后来将/etc/nginx/nginx.conf中的user改成root就好了。 var className='atoc';"}}